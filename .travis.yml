language: cpp

sudo: enabled
dist: trusty
      
env:
  global:
  - LANG="en_US.UTF-8"

branches:
  only:
  - master
  - coverage
  - docker

matrix:
  include:

    - name: macOS clang 
      os: osx
      compiler: clang

    - name: Linux clang
      os: linux
      compiler: clang
      addons:
        apt:
          sources:
            - llvm-toolchain-trusty-5.0
          packages:
            - clang-5.0
      env: MATRIX_EVAL="CXX=clang++-5.0"
      
    - name: Docker
      os: linux
      compiler: gcc
      services:
        - docker
      env: DOCKER=ubuntu:latest

    - name: Linux gcc
      os: linux
      compiler: gcc
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-7
      env: CXX=g++-7 COVERAGE=ON

before_install:
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then brew update; brew cask uninstall --force oclint; ./install-macos-deps.sh; fi
  - eval "${MATRIX_EVAL}" 
  - |
    if [ -n "$DOCKER" ]; then 
      docker pull $DOCKER
      containerid=$(docker run --detach --tty --volume="$PWD":/ariadne --workdir=/ariadne $DOCKER)
      DOCKER_RUN="docker exec --tty $containerid"
      DOCKER_RUN sh -c 'apt update'
      DOCKER_RUN sh -c 'apt install -y libboost-system-dev libboost-serialization-dev libboost-thread-dev libgtk2.0-dev libcairo2-dev libbdd-dev'   
    fi
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then 
      sudo apt-get install -y libboost-system-dev libboost-serialization-dev libboost-thread-dev libgtk2.0-dev libcairo2-dev libbdd-dev;
    fi
    
script: 
  - mkdir build
  - cd build
  - if [ -n "$COVERAGE" ]; then cmake .. -DCMAKE_BUILD_TYPE=Debug; else cmake ..; fi
  - make tests
  - make test
after_success:
  - if [ -n "$COVERAGE" ]; then
      bash <(curl -s https://codecov.io/bash) || echo "Codecov did not collect coverage reports";
    fi
