language: cpp

sudo: enabled
dist: trusty
      
env:
  global:
  - LANG="en_US.UTF-8"

branches:
  only:
  - master
  - coverage
  - docker

matrix:
  include:

    - name: macOS clang 
      os: osx
      compiler: clang

    - name: Linux clang
      os: linux
      addons:
      env: DOCKER=ubuntu:latest COMPILER=clang++-5.0
      
    - name: Linux gcc + Coverage
      os: linux
      services:
        - docker
      env: DOCKER=ubuntu:latest COMPILER=c++ COVERAGE=ON


before_install:
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then brew update; brew cask uninstall --force oclint; ./install-macos-deps.sh; fi
  - |
    if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
      if [ -n "$DOCKER" ]; then
        docker pull $DOCKER
        CONTAINER_ID=$(docker run --detach --tty --volume="$PWD":/ariadne --workdir=/ariadne $DOCKER)
        DOCKER_RUN="docker exec --tty $CONTAINER_ID"
        $DOCKER_RUN sh -c 'apt update'
        $DOCKER_RUN sh -c 'apt install -y curl cmake'
        $DOCKER_RUN sh -c 'apt install -y clang++-5.0 libboost-system-dev libboost-serialization-dev libboost-thread-dev libgtk2.0-dev libcairo2-dev libbdd-dev'   
      else 
        sudo apt-get install -y libboost-system-dev libboost-serialization-dev libboost-thread-dev libgtk2.0-dev libcairo2-dev libbdd-dev
      fi
    fi
    
script:
  - CMAKE_ARGS="-DCMAKE_CXX_COMPILER=$COMPILER"
  - if [ -n "$COVERAGE" ]; then CMAKE_ARGS="$CMAKE_ARGS -DCMAKE_BUILD_TYPE=Debug"; fi
  - echo $CMAKE_ARGS
  - |
    if [ -n "$DOCKER" ]; then
      $DOCKER_RUN sh -c 'cmake . $CMAKE_ARGS'
    else
      cmake . $CMAKE_ARGS
    fi 
  - |
    if [ -n "$DOCKER" ]; then 
      $DOCKER_RUN sh -c 'make tests'
      $DOCKER_RUN sh -c 'make test'
    else
      make tests
      make test
    fi 

after_success:
  - if [ -n "$COVERAGE" ]; then bash <(curl -s https://codecov.io/bash); fi