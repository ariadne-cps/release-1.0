/***************************************************************************
 *            tutorial.dox
 *
 *  Copyright  2014  Luca Geretti
 *
 ****************************************************************************/

/*
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Library General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

/*!

\file tutorial.dox
\brief Tutorial on %Ariadne's features.

\page tutorial_page Tutorial

In this tutorial, we show how to use %Ariadne to model and analyse a hybrid automaton model of a water tank system.

The tutorial files can be found in the \em tutorial directory of the distribution. 

More specifically, the tutorial focuses on one hybrid system, described with increasing level of detail: 

 - \link tutorial/monolithic-forced.h monolithic-forced.h \endlink: a monolithic version of the system, where
all transitions are forced; 
 - \link tutorial/monolithic.h monolithic.h \endlink: the
monolithic system has both forced and unforced transitions;
 - \link tutorial/compositional.h compositional.h \endlink: the system, featuring unforced transitions, is expressed as a composition of subsystems.

While the compositional version may be regarded as the most intuitive way to describe the system, we believe that
comparing the monolithic and compositional versions is still relevant, especially due to numerical issues that may
arise during the analysis of the compositional case.

For each of these three variants, some analysis routines are performed. The analysis part is common and it is contained 
within the file \link tutorial/analysis.h analysis.h \endlink. The source files for the executables instead are given by
\link tutorial/monolithic-forced.cc monolithic-forced.cc \endlink, \link tutorial/monolithic.cc monolithic.cc \endlink 
and \link tutorial/compositional.cc compositional.cc \endlink, respectively.

The automaton represents a hydrodynamical system composed of a tank, a valve and a controller for the valve. In particular, the controller changes the aperture of the valve based on the current water level, with the purpose of keeping the level within two thresholds. 

In the following we will describe the monolithic version, by focusing on the \em forced variant and presenting the differences
that unforced transitions introduce. Then we will describe how a compositional version of the same system can be specified. Finally,
the analysis routines applied to each of the three systems will be explained.

\section tutorial_system_model_monolithic The Monolithic Hybrid Automaton Model

First, we need to create an object to hold the description of an automaton:

  \code HybridAutomaton system("monolithic-forced"); \endcode

All the specification for the automaton will be progressively added to this variable. The provided name is useful in particular for
plotting purposes.

Instead of using explicit values throughout the automaton description, we can supply named parameters:

  \code
    RealParameter a("a",0.02);
    RealParameter b("b",0.31);
    RealParameter T("T",4.0);
    RealParameter hmin("hmin",5.75);
    RealParameter hmax("hmax",7.75);
  \endcode

The role of these parameters will be more clear in the following. It is however relevant to note that if a named parameter is used, Ariadne can substitute its value during analysis; this in turn enables some numerical optimizations and also allows to perform parametric analysis (i.e., explore the behavior of the system when some of its parameters vary within finite intervals).

\subsection LocationsEvents Locations and Events

The monolithic system has four discrete \em locations: 
- \f$\textsc{Opening}\f$: the valve is opening;
- \f$\textsc{Opened}\f$: the valve is fully opened;
- \f$\textsc{Closing}\f$: the valve is closing;
- \f$\textsc{Closed}\f$: the valve is fully closed.

A location is essentially a named discrete state. Example of the definition of a location:

  \code DiscreteLocation opened("opened"); \endcode

Transitions between locations are triggered by \em events, which can be considered names for the transitions in the same way that locations are names for the states. Example of the definition of an event:

  \code DiscreteEvent b_opening("b_opening"); \endcode

The \c b and \c e prefixes stand for \em beginning and \em ending, in order to denote the beginning/ending of the opening/closing of the valve.

\subsection VariablesExpressions Variables and Expressions

The system has two continuous variables, the water level \f$x\f$ and the valve aperture \f$y\f$. A valuation for such variables determines
the \em continuous state of the system at a given time. The variables are defined as follows:

  \code
    RealVariable x("x");
    RealVariable y("y");
  \endcode

The variables are used within \em expressions. An expression in Ariadne may be of the following kinds:

 - Dynamics: the evolution of a variable within a location;
 - Reset: the new value of a variable after a transition between two locations has been taken.
 - Guard: the condition on the variables that allows a transition between two locations;
 - Invariant: the condition on the variables that allows evolution within a location;

An example of an expression:

\code  RealExpression x_opening_closing = -a*sqrt(x) + b*y; \endcode

which, while rather simple, shows how parameters, variables and functions can be used to define an expression. Constant values can be used too, however they do not provide any inherent advantage compared to a parameter having the same value. 

\subsubsection Dynamics Dynamics

Dynamics are associated with a location to define a \em mode. In order to provide such mode, expressions must be defined for each variable of the mode: each expression is associated to the derivative of a variable: in our case, a \f \dot(x) = f_x(x,y) \f and \f \dot(y) = f_y(x,y) \f are required. For example:

\code
    List<RealVariable> varlist;
    varlist.append(x);
    varlist.append(y);
    List<RealExpression> opened_exprlist;
    opened_exprlist.append(x_opened);
    opened_exprlist.append(y_opened_closed);
    VectorFunction dyn_opened(opened_exprlist, varlist);
\endcode

The \c VectorFunction simply associates variables with the expressions for their derivatives, following the order of the corresponding lists. 

An example of a mode:

  

As we can see, nonlinear functions that involve the variables can be used. The first expression is the same for both the opening and closing locations, hence it will be reused.

\subsubsection Guards Guards

\subsubsection Invariants Invariants

\subsubsection Reset Resets

\f[ \dot{T} = H + K(T_E + T_A\cos(2\pi t) - T); \quad \dot{t}=1. \f]

\subsection Transitions Transitions



*/

